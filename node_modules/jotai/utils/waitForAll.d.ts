import type { Atom } from 'jotai';
declare type ResolvePromise<T> = T extends Promise<infer V> ? V : T;
declare type ResolveAtom<T> = T extends Atom<infer V> ? V : T;
declare type ResolveType<T> = ResolvePromise<ResolveAtom<T>>;
export declare function waitForAll<Atoms extends Record<string, Atom<unknown>> | readonly Atom<unknown>[]>(atoms: Atoms): Atom<{
    [K in keyof Atoms]: ResolveType<Atoms[K]>;
}>;
export {};
